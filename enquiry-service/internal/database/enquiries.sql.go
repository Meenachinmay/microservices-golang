// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: enquiries.sql

package database

import (
	"context"
	"time"
)

const createEnquiry = `-- name: CreateEnquiry :one
INSERT INTO enquiries (user_id, property_id, enquiry_date, created_at, updated_at)
VALUES ($1, $2, NOW(), NOW(), NOW())
RETURNING id, user_id, property_id, enquiry_date, created_at, updated_at
`

type CreateEnquiryParams struct {
	UserID     int32
	PropertyID int32
}

func (q *Queries) CreateEnquiry(ctx context.Context, arg CreateEnquiryParams) (Enquiry, error) {
	row := q.db.QueryRowContext(ctx, createEnquiry, arg.UserID, arg.PropertyID)
	var i Enquiry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PropertyID,
		&i.EnquiryDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllEnquiries = `-- name: GetAllEnquiries :many
SELECT id, user_id, property_id, enquiry_date, created_at, updated_at
FROM enquiries
`

func (q *Queries) GetAllEnquiries(ctx context.Context) ([]Enquiry, error) {
	rows, err := q.db.QueryContext(ctx, getAllEnquiries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Enquiry
	for rows.Next() {
		var i Enquiry
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PropertyID,
			&i.EnquiryDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllEnquiriesForAPropertyByIdWithUsers = `-- name: GetAllEnquiriesForAPropertyByIdWithUsers :many
SELECT e.id, e.user_id, e.property_id, e.enquiry_date, e.created_at, e.updated_at, u.id, u.email, u.name
FROM enquiries e
         JOIN users u ON e.user_id = u.id
WHERE e.property_id = $1
`

type GetAllEnquiriesForAPropertyByIdWithUsersRow struct {
	ID          int32
	UserID      int32
	PropertyID  int32
	EnquiryDate time.Time
	CreatedAt   time.Time
	UpdatedAt   time.Time
	ID_2        int32
	Email       string
	Name        string
}

func (q *Queries) GetAllEnquiriesForAPropertyByIdWithUsers(ctx context.Context, propertyID int32) ([]GetAllEnquiriesForAPropertyByIdWithUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllEnquiriesForAPropertyByIdWithUsers, propertyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllEnquiriesForAPropertyByIdWithUsersRow
	for rows.Next() {
		var i GetAllEnquiriesForAPropertyByIdWithUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PropertyID,
			&i.EnquiryDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.Email,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllEnquiriesMadeByAUserByIdWithProperties = `-- name: GetAllEnquiriesMadeByAUserByIdWithProperties :many
SELECT e.id, e.user_id, e.property_id, e.enquiry_date, e.created_at, e.updated_at, p.name, p.location
FROM enquiries e
         JOIN properties p ON e.property_id = p.id
WHERE e.user_id = $1
`

type GetAllEnquiriesMadeByAUserByIdWithPropertiesRow struct {
	ID          int32
	UserID      int32
	PropertyID  int32
	EnquiryDate time.Time
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Name        string
	Location    string
}

func (q *Queries) GetAllEnquiriesMadeByAUserByIdWithProperties(ctx context.Context, userID int32) ([]GetAllEnquiriesMadeByAUserByIdWithPropertiesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllEnquiriesMadeByAUserByIdWithProperties, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllEnquiriesMadeByAUserByIdWithPropertiesRow
	for rows.Next() {
		var i GetAllEnquiriesMadeByAUserByIdWithPropertiesRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PropertyID,
			&i.EnquiryDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Location,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
