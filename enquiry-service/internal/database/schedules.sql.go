// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: schedules.sql

package database

import (
	"context"
	"encoding/json"
)

const createSchedule = `-- name: CreateSchedule :one
INSERT INTO schedules (user_id, task_type, task_details, scheduled_time, created_at, updated_at)
VALUES ($1, $2, $3, $4, NOW(), NOW())
RETURNING id, user_id, task_type, task_details, scheduled_time, created_at, updated_at
`

type CreateScheduleParams struct {
	UserID        int32
	TaskType      string
	TaskDetails   json.RawMessage
	ScheduledTime string
}

func (q *Queries) CreateSchedule(ctx context.Context, arg CreateScheduleParams) (Schedule, error) {
	row := q.db.QueryRowContext(ctx, createSchedule,
		arg.UserID,
		arg.TaskType,
		arg.TaskDetails,
		arg.ScheduledTime,
	)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TaskType,
		&i.TaskDetails,
		&i.ScheduledTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSchedule = `-- name: DeleteSchedule :exec
DELETE FROM schedules
WHERE id = $1
`

func (q *Queries) DeleteSchedule(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSchedule, id)
	return err
}

const getDueSchedules = `-- name: GetDueSchedules :many
SELECT id, user_id, task_type, task_details, scheduled_time, created_at, updated_at
FROM schedules
ORDER BY scheduled_time ASC
`

func (q *Queries) GetDueSchedules(ctx context.Context) ([]Schedule, error) {
	rows, err := q.db.QueryContext(ctx, getDueSchedules)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Schedule
	for rows.Next() {
		var i Schedule
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TaskType,
			&i.TaskDetails,
			&i.ScheduledTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
