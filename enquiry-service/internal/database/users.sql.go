// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"
	"time"
)

const addNewEnquiryToUserById = `-- name: AddNewEnquiryToUserById :one
UPDATE users
SET enquiry_count = enquiry_count + 1, updated_at = NOW()
WHERE id = $1
RETURNING id, email, name, created_at, updated_at, enquiry_count, available_timings, preferred_contact_method
`

func (q *Queries) AddNewEnquiryToUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, addNewEnquiryToUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EnquiryCount,
		&i.AvailableTimings,
		&i.PreferredContactMethod,
	)
	return i, err
}

const countEnquiriesForUserInLastWeek = `-- name: CountEnquiriesForUserInLastWeek :one
SELECT COUNT(*)
FROM enquiries
WHERE user_id = $1
  AND enquiry_date >= $2
`

type CountEnquiriesForUserInLastWeekParams struct {
	UserID      int32
	EnquiryDate time.Time
}

func (q *Queries) CountEnquiriesForUserInLastWeek(ctx context.Context, arg CountEnquiriesForUserInLastWeekParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countEnquiriesForUserInLastWeek, arg.UserID, arg.EnquiryDate)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserByIdWithEnquiry = `-- name: GetUserByIdWithEnquiry :one
SELECT id, email, name, created_at, updated_at, enquiry_count, available_timings, preferred_contact_method
FROM users
WHERE id = $1
`

func (q *Queries) GetUserByIdWithEnquiry(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByIdWithEnquiry, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EnquiryCount,
		&i.AvailableTimings,
		&i.PreferredContactMethod,
	)
	return i, err
}
