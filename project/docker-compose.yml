version: '3'

services:

    broker-service:
        build:
          context: ./../broker-service
          dockerfile: ./../broker-service/broker-service.dockerfile
        restart: always
        ports:
          - "8080:80"
        deploy:
          mode: replicated
          replicas: 1

    authentication-service:
      build:
        context: ./../authentication-service
        dockerfile: ./../authentication-service/authentication-service.dockerfile
      restart: always
      ports:
        - "8081:80"
      deploy:
        mode: replicated
        replicas: 1
      environment:
        DSN: "host=postgres port=5432 user=postgres password=password dbname=users sslmode=disable timezone=UTC connect_timeout=5"

    logger-service:
      build:
        context: ./../logger-service
        dockerfile: ./../logger-service/logger-service.dockerfile
      restart: always
      ports:
        - "8082:80"
      deploy:
        mode: replicated
        replicas: 1

    listener-service:
      build:
        context: ./../listener-service
        dockerfile: ./../listener-service/listener-service.dockerfile
      restart: always
      ports:
        - "8084:80"
      deploy:
        mode: replicated
        replicas: 1
      depends_on:
        - broker-service

    mailer-service:
      build:
        context: ./../mail-service
        dockerfile: ./../mail-service/mail-service.dockerfile
      restart: always
      ports:
        - "8083:80"
      deploy:
        mode: replicated
        replicas: 1
      environment:
        MAIL_DOMAIN: localhost
        MAIL_HOST: mailhog
        MAIL_PORT: 1025
        MAIL_ENCRYPTION: none
        MAIL_USERNAME: ""
        MAIL_PASSWORD: ""
        FROM_NAME: "John Smith"
        FROM_ADDRESS: john.smith@example.com
      depends_on:
        - broker-service

    postgres:
      image: 'postgres:14.0'
      ports:
        - "5432:5432"
      restart: always
      deploy:
        mode: replicated
        replicas: 1
      environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: password
        POSTGRES_DB: users
      volumes:
        - ./db-data/postgres/:/var/lib/postgresql/data/

    mongo:
      image: 'mongo:4.2.17-bionic'
      ports:
        - "27017:27017"
      deploy:
        mode: replicated
        replicas: 1
      environment:
        MONGO_INITDB_DATABASE: logs
        MONGO_INITDB_ROOT_USERNAME: admin
        MONGO_INITDB_ROOT_PASSWORD: password
      volumes:
        - ./db-data/mongo/:/data/db

    mailhog:
      image: 'mailhog/mailhog:latest'
      ports:
        - "1025:1025"
        - "8025:8025"

    rabbitmq:
      image: 'rabbitmq:3.13-management-alpine'
      ports:
        - "5672:5672"
      deploy:
        mode: replicated
        replicas: 1
      volumes:
        - ./db-data/rabbitmq/:/var/lib/rabbitmq

    zookeeper:
      image: bitnami/zookeeper:latest
      platform: linux/arm64
      ports:
        - "2181:2181"
      environment:
        - ALLOW_ANONYMOUS_LOGIN=yes

    kafka:
      image: bitnami/kafka:latest
      platform: linux/arm64
      ports:
        - "9092:9092"
      environment:
        - KAFKA_BROKER_ID=1
        - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
        - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
        - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
        - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
        - ALLOW_PLAINTEXT_LISTENER=yes
      depends_on:
        - zookeeper