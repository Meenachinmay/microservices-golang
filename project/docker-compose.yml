version: '3'

services:

    broker-service:
        build:
          context: ./../broker-service
          dockerfile: ./../broker-service/broker-service.dockerfile
        restart: always
        ports:
          - "8080:80"
        deploy:
          mode: replicated
          replicas: 1

    authentication-service:
      build:
        context: ./../authentication-service
        dockerfile: ./../authentication-service/authentication-service.dockerfile
      restart: always
      ports:
        - "8081:80"
      deploy:
        mode: replicated
        replicas: 1
      env_file:
        - ./.env
      environment:
        DATABASE_URL: ${DATABASE_URL}
      depends_on:
        - postgres

    logger-service:
      build:
        context: ./../logger-service
        dockerfile: ./../logger-service/logger-service.dockerfile
      restart: always
      ports:
        - "8082:80"
      deploy:
        mode: replicated
        replicas: 1
      env_file:
        - ./.env
      environment:
        DATABASE_URL_LOGGER_SERVICE: ${DATABASE_URL_LOGGER_SERVICE}
      depends_on:
        - postgres

    enquiry-service:
      build:
        context: ./../enquiry-service
        dockerfile: ./../enquiry-service/enquiry-service.dockerfile
      restart: always
      ports:
        - "8086:80"
      deploy:
        mode: replicated
        replicas: 1
      env_file:
        - ./.env
      environment:
        DATABASE_URL_LOGGER_SERVICE: ${DATABASE_URL_ENQUIRY_SERVICE}
      depends_on:
        - postgres

    listener-service:
      build:
        context: ./../listener-service
        dockerfile: ./../listener-service/listener-service.dockerfile
      restart: always
      ports:
        - "8084:80"
      deploy:
        mode: replicated
        replicas: 1

    payment-service:
      build:
        context: ./../payment-service
        dockerfile: ./../payment-service/payment-service.dockerfile
      restart: always
      ports:
        - "8085:80"
      deploy:
        mode: replicated
        replicas: 1

    frontend:
      build:
        context: ./../client
        dockerfile: ./../client/client.dockerfile
      restart: always
      ports:
        - "80:3000"
      deploy:
        mode: replicated
        replicas: 1

    mailer-service:
      build:
        context: ./../mail-service
        dockerfile: ./../mail-service/mail-service.dockerfile
      restart: always
      ports:
        - "8083:80"
      deploy:
        mode: replicated
        replicas: 1
      environment:
        MAIL_DOMAIN: localhost
        MAIL_HOST: mailhog
        MAIL_PORT: 1025
        MAIL_ENCRYPTION: none
        MAIL_USERNAME: ""
        MAIL_PASSWORD: ""
        FROM_NAME: "John Smith"
        FROM_ADDRESS: john.smith@example.com
        SENDGRID_API: ${SENDGRID_API}
      depends_on:
        - broker-service

    postgres:
      image: 'postgres:16'
      ports:
        - "5432:5432"
      restart: always
      deploy:
        mode: replicated
        replicas: 1
      environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: password
        POSTGRES_DB: microgolang
      volumes:
        - ./db-data/postgres/:/var/lib/postgresql/data/

    redis:
      image: 'redis:6.2-alpine'
      ports:
        - "6379:6379"
      deploy:
        mode: replicated
        replicas: 1
      volumes:
        - ./db-data/redis/:/data/db
      command: ["redis-server", "--appendonly", "yes"]

    mailhog:
      image: 'mailhog/mailhog:latest'
      ports:
        - "1025:1025"
        - "8025:8025"

    rabbitmq:
      image: 'rabbitmq:3.13-management-alpine'
      ports:
        - "5672:5672"
      deploy:
        mode: replicated
        replicas: 1
      volumes:
        - ./db-data/rabbitmq/:/var/lib/rabbitmq