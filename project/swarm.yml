version: '3'

services:
  broker-service:
    image: startup2023/broker-service:1.0.0
    ports:
      - "8080:80"
    deploy:
      mode: replicated
      replicas: 1

  listener-service:
    image: startup2023/listener-service:1.0.0
    deploy:
      mode: replicated
      replicas: 1

  logger-service:
    image: startup2023/logger-service:1.0.0
    deploy:
      mode: replicated
      replicas: 1
    env_file:
      - ./.env
    environment:
      DATABASE_URL_LOGGER_SERVICE: ${DATABASE_URL_LOGGER_SERVICE}
      TZ: Asia/Tokyo

  enquiry-service:
    image: startup2023/enquiry-service:1.0.0
    deploy:
      mode: replicated
      replicas: 1
    env_file:
      - ./.env
    environment:
      DATABASE_URL_LOGGER_SERVICE: ${DATABASE_URL_ENQUIRY_SERVICE}
      TZ: Asia/Tokyo
    depends_on:
      - postgres

  mail-service:
    image: startup2023/mail-service:1.0.0
    deploy:
      mode: replicated
      replicas: 1
    environment:
      SENDGRID_API: ${SENDGRID_API}

  frontend:
    image: startup2023/frontend
    restart: always
    ports:
      - "80:3000"
    deploy:
      mode: replicated
      replicas: 1

  rabbitmq:
    image: 'rabbitmq:3.13-management-alpine'
    ports:
      - "5672:5672"
    deploy:
      mode: replicated
      replicas: 1

  postgres:
    image: 'postgres:16'
    ports:
      - "5432:5432"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: microgolang
      PGTZ: "Asia/Tokyo"
    volumes:
      - ./db-data/postgres/:/var/lib/postgresql/data/

  redis:
    image: 'redis:6.2-alpine'
    ports:
      - "6379:6379"
    deploy:
      mode: replicated
      replicas: 1
    volumes:
      - ./db-data/redis/:/data/db
    command: [ "redis-server", "--appendonly", "yes" ]



















